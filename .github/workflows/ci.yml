name: CI
on:
  pull_request:
    branches:
      - master
      - main
  push:
    branches:
      - master
      - main

jobs:
  # flutter_test:
  #   name: Run flutter test and analyze
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: setup python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.8"
  #     - name: create .env file
  #       env:
  #         API_URL: ${{ secrets.API_URL }}
  #         SECRET: ${{ secrets.SECRET }}
  #       run: python scripts/create_env.py
  #     - uses: actions/setup-java@v1
  #       with:
  #         java-version: "12.x"
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         channel: "stable"
  #     - run: flutter pub get
  #     - run: flutter analyze
  #     - run: flutter test

  build_appbundle:
    name: Build Flutter (Android)
    # needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: create .env file
        env:
          API_URL: ${{ secrets.API_URL }}
          SECRET: ${{ secrets.SECRET }}
        run: python scripts/create_env.py
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Create Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: key.jks
          encodedString: ${{ secrets.ANDROID_KEY_JKS_BASE64 }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build appbundle

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Cache bundle dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gems-
      - name: Download bundle dependencies
        run: |
          gem install bundler:2.0.2
          bundle config path vendor/bundle
          bundle install
      - name: Release to Google Play (internal)
        env:
          SUPPLY_PACKAGE_NAME: net.cloudphotos.www
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        run: |
          bundle exec fastlane supply \
          --aab build/app/outputs/bundle/release/app-release.aab \
          --track internal

  build_ios:
    name: Build Flutter (iOS)
    # needs: [flutter_test]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: create .env file
        env:
          API_URL: ${{ secrets.API_URL }}
          SECRET: ${{ secrets.SECRET }}
        run: python scripts/create_env.py
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build ios --release --no-codesign